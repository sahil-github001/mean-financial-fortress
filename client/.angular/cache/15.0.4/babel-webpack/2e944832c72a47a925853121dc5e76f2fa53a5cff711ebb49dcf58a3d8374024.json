{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.userDetails = {\n      1000: {\n        acno: 1000,\n        username: 'Amal',\n        password: 1000,\n        balance: 2000,\n        transaction: []\n      },\n      1001: {\n        acno: 1001,\n        username: 'Arun',\n        password: 1001,\n        balance: 2000,\n        transaction: []\n      },\n      1002: {\n        acno: 1002,\n        username: 'Akshay',\n        password: 1002,\n        balance: 2000,\n        transaction: []\n      }\n    };\n  }\n  saveDetails() {\n    if (this.userDetails) {\n      localStorage.setItem('Database', JSON.stringify(this.userDetails));\n      localStorage.setItem('currentUser', JSON.stringify(this.currentUser));\n      localStorage.setItem('currentAcno', JSON.stringify(this.currentAcno));\n    }\n  }\n  register(acno, uname, pswd) {\n    const password = pswd;\n    const username = uname;\n    const body = {\n      acno,\n      username,\n      password\n    };\n    return this.http.post('http://localhost:3000/register', body);\n  }\n  login(acno, pswd) {\n    const password = pswd;\n    const body = {\n      acno,\n      password\n    };\n    return this.http.post('http://localhost:3000/login', body);\n  }\n  deposit(acno, pswd, dAmt) {\n    let userDetails = this.userDetails;\n    if (acno in userDetails) {\n      if (pswd == userDetails[acno].password) {\n        dAmt = parseInt(dAmt);\n        userDetails[acno].balance += dAmt;\n        userDetails[acno]['transaction'].push({\n          type: 'Credit',\n          amount: dAmt\n        });\n        this.saveDetails();\n        return userDetails[acno].balance;\n      } else {\n        alert('Invalid password');\n        return false;\n      }\n    } else {\n      alert('Invalid user');\n      return false;\n    }\n  }\n  withdraw(acno1, pswd1, wAmt) {\n    let userDetails = this.userDetails;\n    if (acno1 in userDetails) {\n      if (pswd1 == userDetails[acno1].password) {\n        wAmt = parseInt(wAmt);\n        if (userDetails[acno1].balance > wAmt) {\n          userDetails[acno1].balance -= wAmt;\n          userDetails[acno1]['transaction'].push({\n            type: 'Debit',\n            amount: wAmt\n          });\n          this.saveDetails();\n          return userDetails[acno1].balance;\n        } else {\n          alert('insufficient balance');\n          return false;\n        }\n      } else {\n        alert('Invalid password');\n        return false;\n      }\n    } else {\n      alert('Invalid user');\n      return false;\n    }\n  }\n  getTransaction(acno) {\n    this.saveDetails();\n    return this.userDetails[acno]['transaction'];\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["DataService","constructor","http","acno","username","password","balance","transaction","saveDetails","userDetails","localStorage","setItem","JSON","stringify","currentUser","currentAcno","register","uname","pswd","body","post","login","deposit","dAmt","parseInt","push","type","amount","alert","withdraw","acno1","pswd1","wAmt","getTransaction","factory","providedIn"],"sourceRoot":"","sources":["/media/sahil/Partition_1/code/BANK/Bank-angular/src/app/services/data.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n\r\n  currentUser:any;// To hold currentuser\r\n  currentAcno:any; // To hold current acno\r\n\r\n  userDetails:any = {\r\n    1000 : {acno:1000, username:'Amal', password:1000, balance:2000, transaction:[]},\r\n    1001 : {acno:1001, username:'Arun', password:1001, balance:2000, transaction:[]},\r\n    1002 : {acno:1002, username:'Akshay', password:1002, balance:2000, transaction:[]}\r\n  }\r\n\r\n  constructor(private http:HttpClient) { }\r\n\r\n  saveDetails(){\r\n    if(this.userDetails){\r\n      localStorage.setItem('Database',JSON.stringify(this.userDetails));\r\n\r\n      localStorage.setItem('currentUser',JSON.stringify(this.currentUser));\r\n\r\n      localStorage.setItem('currentAcno',JSON.stringify(this.currentAcno));\r\n    }\r\n  }\r\n\r\n  register(acno:any, uname:any, pswd:any){\r\n    const password = pswd;\r\n    const username = uname;\r\n    const body = {\r\n      acno,\r\n      username,\r\n      password\r\n    }\r\n    return this.http.post('http://localhost:3000/register', body);\r\n  }\r\n\r\n  login(acno:any, pswd:any){\r\n    const password = pswd;\r\n    const body = {\r\n      acno,\r\n      password\r\n    }\r\n    return this.http.post('http://localhost:3000/login', body);\r\n  }\r\n\r\n  deposit(acno:any, pswd:any, dAmt:any){\r\n    let userDetails = this.userDetails;\r\n\r\n    if (acno in userDetails){\r\n      if (pswd == userDetails[acno].password){\r\n        dAmt = parseInt(dAmt);\r\n        userDetails[acno].balance += dAmt;\r\n\r\n        userDetails[acno]['transaction'].push({\r\n          type:'Credit',\r\n          amount:dAmt\r\n        })\r\n        this.saveDetails();\r\n        return userDetails[acno].balance;\r\n      }else {\r\n        alert('Invalid password');\r\n        return false;\r\n      }\r\n    }else{\r\n      alert('Invalid user');\r\n      return false\r\n    }\r\n  }\r\n  \r\n  withdraw(acno1:any, pswd1:any, wAmt:any){\r\n    let userDetails = this.userDetails;\r\n\r\n    if(acno1 in userDetails){\r\n      if(pswd1 == userDetails[acno1].password){\r\n        wAmt = parseInt(wAmt);\r\n        if(userDetails[acno1].balance > wAmt){\r\n          userDetails[acno1].balance -= wAmt;\r\n\r\n          userDetails[acno1]['transaction'].push({\r\n            type:'Debit',\r\n            amount:wAmt\r\n          })\r\n          this.saveDetails();\r\n          return userDetails[acno1].balance;\r\n        } else{\r\n          alert('insufficient balance');\r\n          return false;\r\n        }\r\n      }else{\r\n        alert('Invalid password');\r\n        return false;\r\n      }\r\n    }else{\r\n      alert('Invalid user');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getTransaction(acno:any){\r\n    this.saveDetails();\r\n    return this.userDetails[acno]['transaction'];\r\n  }\r\n\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}