{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Global http header object \nconst options = {\n  headers: new HttpHeaders(),\n  headers: new HttpClient()\n};\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.userDetails = {\n      1000: {\n        acno: 1000,\n        username: 'Amal',\n        password: 1000,\n        balance: 2000,\n        transaction: []\n      },\n      1001: {\n        acno: 1001,\n        username: 'Arun',\n        password: 1001,\n        balance: 2000,\n        transaction: []\n      },\n      1002: {\n        acno: 1002,\n        username: 'Akshay',\n        password: 1002,\n        balance: 2000,\n        transaction: []\n      }\n    };\n  }\n  saveDetails() {\n    if (this.userDetails) {\n      localStorage.setItem('Database', JSON.stringify(this.userDetails));\n      localStorage.setItem('currentUser', JSON.stringify(this.currentUser));\n      localStorage.setItem('currentAcno', JSON.stringify(this.currentAcno));\n    }\n  }\n  register(acno, uname, pswd) {\n    const password = pswd;\n    const username = uname;\n    const body = {\n      acno,\n      username,\n      password\n    };\n    return this.http.post('http://localhost:3000/register', body);\n  }\n  login(acno, pswd) {\n    const password = pswd;\n    const body = {\n      acno,\n      password\n    };\n    return this.http.post('http://localhost:3000/login', body);\n  }\n  getToken() {\n    // fetch the token from local storage\n    const token = JSON.parse(localStorage.getItem('Token') || '');\n    // generate header\n    let header = new HttpHeaders();\n    //append token inside header\n    if (token) {\n      options.headers = header.append('x-access-token', token);\n    }\n    return options;\n  }\n  deposit(acno, pswd, dAmt) {\n    const body = {\n      acno: acno,\n      password: pswd,\n      dAmt: dAmt\n    };\n    return this.http.post('http://localhost:3000/deposit', body, this.getToken());\n  }\n  withdraw(acno1, pswd1, wAmt) {\n    const body = {\n      acno: acno1,\n      password: pswd1,\n      wAmt: wAmt\n    };\n    return this.http.post('http://localhost:3000/withdraw', body, this.getToken());\n  }\n  getTransaction(acno) {\n    const body = {\n      acno\n    };\n    return this.http.post('http://localhost:3000/transaction', body, this.getToken());\n  }\n  deleteAcc(acno) {\n    return this.http.delete('http://localhost:3000/deleteAcc/' + acno);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpClient","HttpHeaders","options","headers","DataService","constructor","http","acno","username","password","balance","transaction","saveDetails","userDetails","localStorage","setItem","JSON","stringify","currentUser","currentAcno","register","uname","pswd","body","post","login","getToken","token","parse","getItem","header","append","deposit","dAmt","withdraw","acno1","pswd1","wAmt","getTransaction","deleteAcc","delete","factory","providedIn"],"sourceRoot":"","sources":["/media/sahil/Partition_1/code/BANK/Bank-angular/src/app/services/data.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n// Global http header object \r\nconst options = {\r\n  headers:new HttpHeaders()\r\n  headers:new HttpClient()\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n\r\n  currentUser:any;// To hold currentuser\r\n  currentAcno:any; // To hold current acno\r\n\r\n  userDetails:any = {\r\n    1000 : {acno:1000, username:'Amal', password:1000, balance:2000, transaction:[]},\r\n    1001 : {acno:1001, username:'Arun', password:1001, balance:2000, transaction:[]},\r\n    1002 : {acno:1002, username:'Akshay', password:1002, balance:2000, transaction:[]}\r\n  }\r\n\r\n  constructor(private http:HttpClient) { }\r\n\r\n  saveDetails(){\r\n    if(this.userDetails){\r\n      localStorage.setItem('Database',JSON.stringify(this.userDetails));\r\n\r\n      localStorage.setItem('currentUser',JSON.stringify(this.currentUser));\r\n\r\n      localStorage.setItem('currentAcno',JSON.stringify(this.currentAcno));\r\n    }\r\n  }\r\n\r\n  register(acno:any, uname:any, pswd:any){\r\n    const password = pswd;\r\n    const username = uname;\r\n    const body = {\r\n      acno,\r\n      username,\r\n      password\r\n    }\r\n    return this.http.post('http://localhost:3000/register', body);\r\n  }\r\n\r\n  login(acno:any, pswd:any){\r\n    const password = pswd;\r\n    const body = {\r\n      acno,\r\n      password\r\n    }\r\n    return this.http.post('http://localhost:3000/login', body);\r\n  }\r\n\r\n  getToken(){\r\n    // fetch the token from local storage\r\n    const token = JSON.parse(localStorage.getItem('Token') || '');\r\n    // generate header\r\n    let header = new HttpHeaders()\r\n    //append token inside header\r\n    if(token){\r\n      options.headers = header.append('x-access-token', token);\r\n    }\r\n    return options\r\n  }\r\n\r\n  deposit(acno:any, pswd:any, dAmt:any){\r\n    const body = {\r\n      acno:acno,\r\n      password:pswd,\r\n      dAmt:dAmt\r\n    }\r\n    return this.http.post('http://localhost:3000/deposit', body, this.getToken());\r\n  }\r\n  \r\n  withdraw(acno1:any, pswd1:any, wAmt:any){\r\n   const body = {\r\n    acno:acno1,\r\n    password:pswd1,\r\n    wAmt:wAmt\r\n   }\r\n   return this.http.post('http://localhost:3000/withdraw', body, this.getToken());\r\n  }\r\n\r\n  getTransaction(acno:any){\r\n    const body = {\r\n      acno\r\n    }\r\n    return this.http.post('http://localhost:3000/transaction', body, this.getToken());\r\n  }\r\n\r\n  deleteAcc(acno:any){\r\n    return this.http.delete('http://localhost:3000/deleteAcc/'+acno)\r\n  }\r\n\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}